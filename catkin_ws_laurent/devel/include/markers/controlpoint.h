// Generated by gencpp from file markers/controlpoint.msg
// DO NOT EDIT!


#ifndef MARKERS_MESSAGE_CONTROLPOINT_H
#define MARKERS_MESSAGE_CONTROLPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace markers
{
template <class ContainerAllocator>
struct controlpoint_
{
  typedef controlpoint_<ContainerAllocator> Type;

  controlpoint_()
    : point()
    , normal()  {
    }
  controlpoint_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , normal(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _point_type;
  _point_type point;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _normal_type;
  _normal_type normal;





  typedef boost::shared_ptr< ::markers::controlpoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::markers::controlpoint_<ContainerAllocator> const> ConstPtr;

}; // struct controlpoint_

typedef ::markers::controlpoint_<std::allocator<void> > controlpoint;

typedef boost::shared_ptr< ::markers::controlpoint > controlpointPtr;
typedef boost::shared_ptr< ::markers::controlpoint const> controlpointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::markers::controlpoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::markers::controlpoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::markers::controlpoint_<ContainerAllocator1> & lhs, const ::markers::controlpoint_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.normal == rhs.normal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::markers::controlpoint_<ContainerAllocator1> & lhs, const ::markers::controlpoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace markers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::markers::controlpoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::markers::controlpoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::markers::controlpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::markers::controlpoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::markers::controlpoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::markers::controlpoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::markers::controlpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17a4dbdec115e427a96101ad4aea3f0b";
  }

  static const char* value(const ::markers::controlpoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17a4dbdec115e427ULL;
  static const uint64_t static_value2 = 0xa96101ad4aea3f0bULL;
};

template<class ContainerAllocator>
struct DataType< ::markers::controlpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "markers/controlpoint";
  }

  static const char* value(const ::markers::controlpoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::markers::controlpoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] point\n"
"float64[] normal\n"
;
  }

  static const char* value(const ::markers::controlpoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::markers::controlpoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.normal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controlpoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::markers::controlpoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::markers::controlpoint_<ContainerAllocator>& v)
  {
    s << indent << "point[]" << std::endl;
    for (size_t i = 0; i < v.point.size(); ++i)
    {
      s << indent << "  point[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.point[i]);
    }
    s << indent << "normal[]" << std::endl;
    for (size_t i = 0; i < v.normal.size(); ++i)
    {
      s << indent << "  normal[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARKERS_MESSAGE_CONTROLPOINT_H
