// Generated by gencpp from file sensor/temp.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_TEMP_H
#define SENSOR_MESSAGE_TEMP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct temp_
{
  typedef temp_<ContainerAllocator> Type;

  temp_()
    : temp()  {
    }
  temp_(const ContainerAllocator& _alloc)
    : temp(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _temp_type;
  _temp_type temp;





  typedef boost::shared_ptr< ::sensor::temp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::temp_<ContainerAllocator> const> ConstPtr;

}; // struct temp_

typedef ::sensor::temp_<std::allocator<void> > temp;

typedef boost::shared_ptr< ::sensor::temp > tempPtr;
typedef boost::shared_ptr< ::sensor::temp const> tempConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::temp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::temp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::temp_<ContainerAllocator1> & lhs, const ::sensor::temp_<ContainerAllocator2> & rhs)
{
  return lhs.temp == rhs.temp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::temp_<ContainerAllocator1> & lhs, const ::sensor::temp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor::temp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::temp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::temp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::temp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::temp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::temp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::temp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5369666b54d681f4247009dedc80d817";
  }

  static const char* value(const ::sensor::temp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5369666b54d681f4ULL;
  static const uint64_t static_value2 = 0x247009dedc80d817ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::temp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/temp";
  }

  static const char* value(const ::sensor::temp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::temp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] temp\n"
;
  }

  static const char* value(const ::sensor::temp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::temp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct temp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::temp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::temp_<ContainerAllocator>& v)
  {
    s << indent << "temp[]" << std::endl;
    for (size_t i = 0; i < v.temp.size(); ++i)
    {
      s << indent << "  temp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.temp[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_TEMP_H
