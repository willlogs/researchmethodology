// Generated by gencpp from file sensor/gyro.msg
// DO NOT EDIT!


#ifndef SENSOR_MESSAGE_GYRO_H
#define SENSOR_MESSAGE_GYRO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor
{
template <class ContainerAllocator>
struct gyro_
{
  typedef gyro_<ContainerAllocator> Type;

  gyro_()
    : gyro()  {
    }
  gyro_(const ContainerAllocator& _alloc)
    : gyro(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gyro_type;
  _gyro_type gyro;





  typedef boost::shared_ptr< ::sensor::gyro_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor::gyro_<ContainerAllocator> const> ConstPtr;

}; // struct gyro_

typedef ::sensor::gyro_<std::allocator<void> > gyro;

typedef boost::shared_ptr< ::sensor::gyro > gyroPtr;
typedef boost::shared_ptr< ::sensor::gyro const> gyroConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor::gyro_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor::gyro_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor::gyro_<ContainerAllocator1> & lhs, const ::sensor::gyro_<ContainerAllocator2> & rhs)
{
  return lhs.gyro == rhs.gyro;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor::gyro_<ContainerAllocator1> & lhs, const ::sensor::gyro_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor::gyro_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor::gyro_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::gyro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor::gyro_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::gyro_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor::gyro_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor::gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e30554e43a74429ffbf966ec16995406";
  }

  static const char* value(const ::sensor::gyro_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe30554e43a74429fULL;
  static const uint64_t static_value2 = 0xfbf966ec16995406ULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor::gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor/gyro";
  }

  static const char* value(const ::sensor::gyro_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor::gyro_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] gyro\n"
;
  }

  static const char* value(const ::sensor::gyro_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor::gyro_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gyro);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gyro_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor::gyro_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor::gyro_<ContainerAllocator>& v)
  {
    s << indent << "gyro[]" << std::endl;
    for (size_t i = 0; i < v.gyro.size(); ++i)
    {
      s << indent << "  gyro[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gyro[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_MESSAGE_GYRO_H
